<#@ template tier="20" #>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
	
	<Packages>
		
		<# foreach (var table in RootNode.Tables.Where(t => t.GetTag("SupportTableType") == "Core")) { #>
			
			<Package Name="CDC_Extract_<#=table.Schema#>_<#=table.Name#>" ConstraintMode="Linear">
			    
			    <Parameters>
			        <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-PackageParameters.biml")#>
			    </Parameters>
				
				<Variables>
			        <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-PackageVariables.biml")#>
		            <Variable Name="CDCState" DataType="String"></Variable>
		            <Variable Name="CDCStateName" DataType="String"><#=table.GetTag("CoreTableName")#></Variable>
		            <Variable Name="CDCBeginTaskOperation" DataType="Int32" EvaluateAsExpression="true">@[$Package::IsInitialLoad] ? 0 : 3</Variable>
                    <Variable Name="CDCEndTaskOperation" DataType="Int32" EvaluateAsExpression="true">@[$Package::IsInitialLoad] ? 1 : 4</Variable>
				</Variables>
				
				<Tasks>
				    
				    <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-LogPackageExecution.biml", "Start")#>
				            
				    <Container Name="CDC Extract <#=table.Schema#> <#=table.Name#>" ConstraintMode="Linear">
				        <Tasks>
    	                    
                            <CdcControl Name="CDC Begin" ConnectionName="<#=RootNode.AdoNetConnections.Where(c => c.GetTag("CoreConnectionName") == table.GetTag("SourceConnectionName")).FirstOrDefault()#>" ControlOperation="GetProcessingRange" StateVariableName="User.CDCState" StateConnectionName="<#=RootNode.AdoNetConnections.Where(c => c.GetTag("ConnectionType") == "Admin").FirstOrDefault()#>" AutomaticStatePersistence="true" StateName="<#=table.GetTag("CoreTableName")#>" CdcStartLsn="">
                                <Expressions>
                                    <Expression ExternalProperty="StateName">@[User::CDCStateName]</Expression>
                                    <Expression ExternalProperty="TaskOperation">@[User::CDCBeginTaskOperation]</Expression>
                                </Expressions>
                                <ExternalStateTable Table="[ETL].[CDCState]" />
                            </CdcControl>
				            
        		            <Container Name="Initial or Incremental Load">
                                <Tasks>
				            
                		            <Container Name="Initial Load" ConstraintMode="Linear">
                		                <SsisAnnotations>
                		                    <SsisAnnotation>Container gets enabled if parameter IsInitialLoad is True, and disabled if parameter IsInitialLoad is False.</SsisAnnotation>
                		                </SsisAnnotations>
                	                    <Expressions>
                	                        <Expression PropertyName="Disable">@[$Package::IsInitialLoad] == True ? False : True</Expression>
                	                    </Expressions>
                	                    
                		                <Tasks>
                		                    
                				            <ExecuteSQL Name="Truncate <#=table.Schema#> <#=table.Name#>" ConnectionName="<#=table.Connection.Name#>">
                				                <DirectInput>TRUNCATE TABLE <#=table.Schema#>.<#=table.Name#>;</DirectInput>
                				            </ExecuteSQL>
                			                
                			                <Dataflow Name="Initial Load <#=table.Schema#> <#=table.Name#>">
                        						<Transformations>
                        
                                                    <OleDbSource Name="Source" ConnectionName="<#=table.GetTag("SourceConnectionName")#>">
                        								<DirectInput>
                        								    SELECT 
                        								        <#=table.GetColumnList(c => c.GetTag("IsETLColumn") != "True")#>, 
                        								        CONVERT(NCHAR(40), HASHBYTES('SHA1', CONCAT(<#=table.GetColumnList(c => c.GetTag("IsETLColumn") != "True" && c.IsUsedInPrimaryKey == false, null, "'|', CONVERT(NVARCHAR(MAX), [", "])") #>)), 2) AS <#=table.Columns.Where(c => c.GetTag("IsHashKeyColumn") == "True").FirstOrDefault()#> 
                        								    FROM <#=table.GetTag("SourceSchemaQualifiedName")#>;
                								        </DirectInput>
                        							</OleDbSource>
                        							
                        				            <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-RowCount.biml", "Select")#>
                        							
                                                    <DerivedColumns Name="Add ETL Columns - Insert">
                                                        <Columns>
                    				                        <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"ETL-DerivedColumns.biml", "Insert")#>
                                                        </Columns>
                                                    </DerivedColumns>
                        
                        				            <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-RowCount.biml", "Insert")#>
                                                    
                                                    <OleDbDestination Name="Destination <#=table.Schema#> <#=table.Name#>" ConnectionName="<#=table.Connection.Name#>">
                                                        <ExternalTableOutput Table="<#=table.Schema#>.<#=table.Name#>" />
                                                    </OleDbDestination>
                        						    
                        						</Transformations>
                        					</Dataflow>
                        					    
                		                </Tasks>
                		            </Container>
        				            
        				            <Container Name="Incremental Load" ConstraintMode="Linear">
                		                <SsisAnnotations>
                		                    <SsisAnnotation>Container gets enabled if parameter IsInitialLoad is False, and disabled if parameter IsInitialLoad is True.</SsisAnnotation>
                		                </SsisAnnotations>
                	                    <Expressions>
                	                        <Expression PropertyName="Disable">@[$Package::IsInitialLoad] == True ? True : False</Expression>
                	                    </Expressions>	
                	                    
        				                <Tasks>
        				                    
                		                    <# foreach (var supportTable in RootNode.Tables.Where(t => t.GetTag("CoreTableName") == table.Schema+"."+table.Name).Where(t => t.GetTag("SupportTableType") != "Core" )) { #>
                            					<ExecuteSQL Name="Truncate <#=supportTable.Schema#> <#=supportTable.Name#>" ConnectionName="<#=supportTable.Connection.Name#>">
                            						<DirectInput>TRUNCATE TABLE <#=supportTable.Schema#>.<#=supportTable.Name#>;</DirectInput>
                            					</ExecuteSQL>
                        					<# } #>
                        					
                        					<Dataflow Name="Incremental Load <#=table.Schema#> <#=table.Name#>">
                                                
                        						<Transformations>
                        						    
                        						    <CdcSource Name="CDC Source" ConnectionName="<#=RootNode.AdoNetConnections.Where(c => c.GetTag("CoreConnectionName") == table.GetTag("SourceConnectionName")).FirstOrDefault()#>" CaptureInstance="<#=table.Name#>_ETL_CDC" StateVariableName="User.CDCState" />
                        				      
                        				            <# dynamic outRCSelect; #>
                        				            <#=CallBimlScriptWithOutput(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-RowCount.biml", out outRCSelect, "Select", "CDC Source.Output")#>
                        						    
                                                    <CustomComponent Name="CDC Splitter" ComponentClassId="{8DC69D45-2AD5-40C6-AAEC-25722F92D6FC}" ComponentTypeName="Attunity.SqlServer.CDCSplit.CdcSplitterComponent, Attunity.SqlServer.CDCSplit, Version=5.0.0.0, Culture=neutral, PublicKeyToken=aa342389a732e31c" ContactInfo="Attunity Ltd.; All Rights Reserved; http://www.attunity.com;" UsesDispositions="true" Version="7" ValidateExternalMetadata="true">
                                                        <InputPaths>
                                                            <InputPath Identifier="Input" OutputPathName="<#=outRCSelect.RowCountPathName.ToString()#>.Output" ErrorOrTruncationOperation="RedirectRow" ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow">
                                                                <InputColumns>
                                                                    <InputColumn SourceColumn="__$start_lsn" />
                                                                    <InputColumn SourceColumn="__$seqval" />
                                                                    <InputColumn SourceColumn="__$operation" />
                                                                    <InputColumn SourceColumn="__$update_mask" />
                                                                    <# foreach (var column in table.Columns.Where(c => c.GetTag("IsETLColumn") != "True")) { #>
                                                                        <InputColumn SourceColumn="<#=column.Name#>" />
                                                                    <# } #>
                                                                    <InputColumn SourceColumn="__$command_id" />
                                                                    <InputColumn SourceColumn="__$reprocessing" />
                                                                </InputColumns>
                                                            </InputPath>
                                                        </InputPaths>
                                                    
                                                        <OutputPaths>
                                                            
                                                            <OutputPath Name="Insert">
                                                                <CustomProperties>
                                                                    <CustomProperty Name="OutputType" DataType="Int32" TypeConverter="Attunity.SqlServer.CDCSplit.OutputType, Attunity.SqlServer.CDCSplit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=aa342389a732e31c">0</CustomProperty>
                                                                </CustomProperties>
                                                                <OutputColumns>
                                                                    <OutputColumn Name="__$start_lsn" DataType="Binary" Length="10" />
                                                                    <OutputColumn Name="__$seqval" DataType="Binary" Length="10" />
                                                                    <OutputColumn Name="__$operation" DataType="Int32" />
                                                                    <OutputColumn Name="__$update_mask" DataType="Binary" Length="128" />
                                                                    <# foreach (var column in table.Columns.Where(c => c.GetTag("IsETLColumn") != "True")) { #>
                                                                        <OutputColumn Name="<#=column.Name#>" DataType="<#=column.DataType#>" Length="<#=column.Length#>" Precision="<#=column.Precision#>" Scale="<#=column.Scale#>" />
                                                                    <# } #>
                                                                    <OutputColumn Name="__$command_id" DataType="Int32" />
                                                                    <OutputColumn Name="__$reprocessing" DataType="Boolean" />
                                                                </OutputColumns>
                                                                <ExternalColumns />
                                                            </OutputPath>
                                                            
                                                            <OutputPath Name="Update">
                                                                <CustomProperties>
                                                                    <CustomProperty Name="OutputType" DataType="Int32" TypeConverter="Attunity.SqlServer.CDCSplit.OutputType, Attunity.SqlServer.CDCSplit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=aa342389a732e31c">1</CustomProperty>
                                                                </CustomProperties>
                                                                <OutputColumns>
                                                                    <OutputColumn Name="__$start_lsn" DataType="Binary" Length="10" />
                                                                    <OutputColumn Name="__$seqval" DataType="Binary" Length="10" />
                                                                    <OutputColumn Name="__$operation" DataType="Int32" />
                                                                    <OutputColumn Name="__$update_mask" DataType="Binary" Length="128" />
                                                                    <# foreach (var column in table.Columns.Where(c => c.GetTag("IsETLColumn") != "True")) { #>
                                                                        <OutputColumn Name="<#=column.Name#>" DataType="<#=column.DataType#>" Length="<#=column.Length#>" Precision="<#=column.Precision#>" Scale="<#=column.Scale#>" />
                                                                    <# } #>
                                                                    <OutputColumn Name="__$command_id" DataType="Int32" />
                                                                    <OutputColumn Name="__$reprocessing" DataType="Boolean" />
                                                                </OutputColumns>
                                                            </OutputPath>
                                                            
                                                            <OutputPath Name="Delete">
                                                                <CustomProperties>
                                                                    <CustomProperty Name="OutputType" DataType="Int32" TypeConverter="Attunity.SqlServer.CDCSplit.OutputType, Attunity.SqlServer.CDCSplit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=aa342389a732e31c">2</CustomProperty>
                                                                </CustomProperties>
                                                                <OutputColumns>
                                                                    <OutputColumn Name="__$start_lsn" DataType="Binary" Length="10" />
                                                                    <OutputColumn Name="__$seqval" DataType="Binary" Length="10" />
                                                                    <OutputColumn Name="__$operation" DataType="Int32" />
                                                                    <OutputColumn Name="__$update_mask" DataType="Binary" Length="128" />
                                                                    <# foreach (var column in table.Columns.Where(c => c.GetTag("IsETLColumn") != "True")) { #>
                                                                        <OutputColumn Name="<#=column.Name#>" DataType="<#=column.DataType#>" Length="<#=column.Length#>" Precision="<#=column.Precision#>" Scale="<#=column.Scale#>" />
                                                                    <# } #>
                                                                    <OutputColumn Name="__$command_id" DataType="Int32" />
                                                                    <OutputColumn Name="__$reprocessing" DataType="Boolean" />
                                                                </OutputColumns>
                                                            </OutputPath>
                                                            
                                                            <OutputPath Name="Error" IsErrorOutput="true">
                                                                <CustomProperties>
                                                                    <CustomProperty Name="OutputType" DataType="Int32" TypeConverter="Attunity.SqlServer.CDCSplit.OutputType, Attunity.SqlServer.CDCSplit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=aa342389a732e31c">3</CustomProperty>
                                                                </CustomProperties>
                                                                <OutputColumns>
                                                                    <OutputColumn Name="__$start_lsn" DataType="Binary" Length="10" />
                                                                    <OutputColumn Name="__$seqval" DataType="Binary" Length="10" />
                                                                    <OutputColumn Name="__$operation" DataType="Int32" />
                                                                    <OutputColumn Name="__$update_mask" DataType="Binary" Length="128" />
                                                                    <# foreach (var column in table.Columns.Where(c => c.GetTag("IsETLColumn") != "True")) { #>
                                                                        <OutputColumn Name="<#=column.Name#>" DataType="<#=column.DataType#>" Length="<#=column.Length#>" Precision="<#=column.Precision#>" Scale="<#=column.Scale#>" />
                                                                    <# } #>
                                                                    <OutputColumn Name="__$command_id" DataType="Int32" />
                                                                    <OutputColumn Name="__$reprocessing" DataType="Boolean" />
                                                                </OutputColumns>
                                                            </OutputPath>
                                                        
                                                        </OutputPaths>
                                                    
                                                    </CustomComponent>
                                                    
                        							<!-- Start New Rows -->
                        							<# dynamic outRCInsert; #>
                        				            <#=CallBimlScriptWithOutput(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-RowCount.biml", out outRCInsert, "Insert", "CDC Splitter.Insert", "New Rows")#>
                        						    
                        						    <DerivedColumns Name="Add ETL Columns - Insert">
                                                        <InputPath OutputPathName="<#=outRCInsert.RowCountPathName.ToString()#>.Output" />
                                                        <Columns>
                    				                        <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"ETL-DerivedColumns.biml", "Insert")#>
                                                        </Columns>
                                                    </DerivedColumns>
                        						    <!-- End New Rows -->
                                                        
                                                    <!-- Start Updated Rows -->
                    							    <# dynamic outRCUpdate; #>
                    				                <#=CallBimlScriptWithOutput(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-RowCount.biml", out outRCUpdate, "Update", "CDC Splitter.Update", "Updated Rows")#>
                                                    
                                                    <DerivedColumns Name="Add ETL Columns - Update">
                                                        <InputPath OutputPathName="<#=outRCUpdate.RowCountPathName.ToString()#>.Output" />
                                                        <Columns>
                    				                        <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"ETL-DerivedColumns.biml", "Update")#>
                                                        </Columns>
                                                    </DerivedColumns>
                                                    <!-- End Updated Rows -->
                                                        
                                                    <!-- Start Deleted Rows -->
                    							    <# dynamic outRCDelete; #>
                    				                <#=CallBimlScriptWithOutput(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-RowCount.biml", out outRCDelete, "Delete", "CDC Splitter.Delete", "Deleted Rows")#>
                                                    
                                                    <DerivedColumns Name="Add ETL Columns - Delete">
                                                        <InputPath OutputPathName="<#=outRCDelete.RowCountPathName.ToString()#>.Output" />
                                                        <Columns>
                    				                        <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"ETL-DerivedColumns.biml", "Delete")#>
                                                        </Columns>
                                                    </DerivedColumns>
                                                    <!-- End Deleted Rows -->
                                                    
                                                    <!-- Start Error Rows -->
                    							    <# dynamic outRCIgnore; #>
                    				                <#=CallBimlScriptWithOutput(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-RowCount.biml", out outRCIgnore, "Error", "CDC Splitter.Error", "Error Rows")#>
                                                    <!-- End Ignored Rows -->
                                                        
                                                    <!-- Start Union All -->
                                                    <UnionAll Name="Union All">
                                                        <InputPaths>
                                                            <InputPath OutputPathName="Add ETL Columns - Insert.Output" />
                                                            <InputPath OutputPathName="Add ETL Columns - Update.Output" />
                                                            <InputPath OutputPathName="Add ETL Columns - Delete.Output" />
                                                        </InputPaths>
                                                    </UnionAll>
                                                    
                                                    <OleDbDestination Name="Destination <#=table.Schema#> <#=table.Name#>_STG" ConnectionName="<#=table.Connection.Name#>">
                                                        <ExternalTableOutput Table="<#=table.Schema#>.<#=table.Name#>_STG" />
                                                    </OleDbDestination>
                                                    <!-- End Union All -->
                        						    
                        						</Transformations>
                        					
                        					    
                        					</Dataflow>
                        					
                        					<ExecuteSQL Name="Merge <#=table.Schema#> <#=table.Name#>" ConnectionName="<#=table.Connection.Name#>">
                        						<DirectInput>EXECUTE <#=table.Schema#>.<#=table.Name#>_Merge;</DirectInput>
                        					</ExecuteSQL>
                        					    
        				                </Tasks>
        				            </Container>
                					    
				                </Tasks>
				            </Container>
				            
                            <CdcControl Name="CDC End" ConnectionName="<#=RootNode.AdoNetConnections.Where(c => c.GetTag("CoreConnectionName") == table.GetTag("SourceConnectionName")).FirstOrDefault()#>" ControlOperation="MarkProcessedRange" StateVariableName="User.CDCState" StateConnectionName="<#=RootNode.AdoNetConnections.Where(c => c.GetTag("ConnectionType") == "Admin").FirstOrDefault()#>" AutomaticStatePersistence="true" StateName="<#=table.GetTag("CoreTableName")#>" CdcStartLsn="">
                                <Expressions>
                                    <Expression ExternalProperty="StateName">@[User::CDCStateName]</Expression>
                                    <Expression ExternalProperty="TaskOperation">@[User::CDCEndTaskOperation]</Expression>
                                </Expressions>
                                <ExternalStateTable Table="[ETL].[CDCState]" />
                            </CdcControl>
					
				        </Tasks>
				    </Container>
					
				    <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-LogPackageExecution.biml", "Stop")#>
				        
				</Tasks>
				
			    <#=CallBimlScript(RootNode.ObjectTag["UtilitiesPath"]+"Auditing-LogPackageExecution.biml", "Error")#>
				
			</Package>
			
		<# } #>
			
	</Packages>
	
</Biml>